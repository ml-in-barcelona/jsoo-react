let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                ("name", (inject name))|][@@merlin.hide ] in
  let make =
    ((fun ?(name= (("")[@reason.raw_literal ""])) ->
        (((React.Fragment.make
             ~children:[div [||]
                          [((React.string
                               ((("Hello ")[@reason.raw_literal "Hello "]) ^
                                  name))
                          [@reason.preserve_braces ])];
                       Hello.make ~one:(("1")[@reason.raw_literal "1"])
                         ~children:[((React.string
                                        ((("Hello ")
                                           [@reason.raw_literal "Hello "]) ^
                                           name))
                                   [@reason.preserve_braces ])] ()] ())
        [@reason.preserve_braces ]) : React.element))
    [@warning "-16"]) in
  ((let make
      (Props :
        < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
          Js_of_ocaml.Js.t)
      =
      make
        ?name:((fun (type res) ->
                  fun (type a0) ->
                    fun (a0 : a0 Js_of_ocaml.Js.t) ->
                      fun
                        (_ :
                          a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                        -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res))
                 (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
    fun ?name ->
      fun ?key ->
        fun () -> React.create_element make (make_props ?key ?name ()))
    [@merlin.hide ])
let make =
  let make_props
    : a:'a ->
        b:'b ->
          ?key:string ->
            unit ->
              <
                a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                          Js_of_ocaml.Js.readonly_prop
                                                         > 
                Js_of_ocaml.Js.t
    =
    fun ~a ->
      fun ~b ->
        fun ?key ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                  ("b", (inject b));("a", (inject a))|][@@merlin.hide ] in
  let make =
    ((fun ~a ->
        ((fun ~b ->
            fun _ ->
              (((print_endline (("This function should be named `Test`")
                   [@reason.raw_literal
                     "This function should be named `Test`"]);
                 div [||] [])
              [@reason.preserve_braces ]) : React.element))
        [@warning "-16"]))
    [@warning "-16"]) in
  ((let make
      (Props :
        <
          a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                    Js_of_ocaml.Js.readonly_prop
                                                   > 
          Js_of_ocaml.Js.t)
      =
      make
        ~b:((fun (type res) ->
               fun (type a0) ->
                 fun (a0 : a0 Js_of_ocaml.Js.t) ->
                   fun
                     (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                     -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
              (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
        ~a:((fun (type res) ->
               fun (type a0) ->
                 fun (a0 : a0 Js_of_ocaml.Js.t) ->
                   fun
                     (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                     -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
              (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
    fun ~a ->
      fun ~b ->
        fun ?key ->
          fun () -> React.create_element make (make_props ?key ~b ~a ()))
    [@merlin.hide ])
module External =
  struct
    let component =
      let component_props
        : a:int ->
            b:string ->
              ?key:string ->
                unit ->
                  <
                    a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                               Js_of_ocaml.Js.readonly_prop
                                                              > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject (Js_of_ocaml.Js.string b)));("a",
                                                                  (inject a))|]
        [@@merlin.hide ] in
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun () ->
              React.create_element
                (Js_of_ocaml.Js.Unsafe.js_expr
                   "require(\"my-react-library\").MyReactComponent")
                (component_props ?key ~b ~a ())[@@otherAttribute
                                                 (("bla")
                                                   [@reason.raw_literal
                                                     "bla"])]
  end
module Bar =
  struct
    let make =
      let make_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|][@@merlin.hide ] in
      let make =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  (((print_endline
                       (("This function should be named `Test$Bar`")
                       [@reason.raw_literal
                         "This function should be named `Test$Bar`"]);
                     div [||] [])
                  [@reason.preserve_braces ]) : React.element))
            [@warning "-16"]))
        [@warning "-16"]) in
      ((let make
          (Props :
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t)
          =
          make
            ~b:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
            ~a:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () -> React.create_element make (make_props ?key ~b ~a ()))
        [@merlin.hide ])
    let component =
      let component_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|][@@merlin.hide ] in
      let component =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  (((print_endline
                       (("This function should be named `Test$Bar$component`")
                       [@reason.raw_literal
                         "This function should be named `Test$Bar$component`"]);
                     div [||] [])
                  [@reason.preserve_braces ]) : React.element))
            [@warning "-16"]))
        [@warning "-16"]) in
      ((let component
          (Props :
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t)
          =
          component
            ~b:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
            ~a:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                React.create_element component
                  (component_props ?key ~b ~a ()))
        [@merlin.hide ])
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let make =
      let make_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|][@@merlin.hide ] in
      let make =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  (((print_endline
                       (("This function should be named `Test$Func`")
                       [@reason.raw_literal
                         "This function should be named `Test$Func`"]) M.x;
                     div [||] [])
                  [@reason.preserve_braces ]) : React.element))
            [@warning "-16"]))
        [@warning "-16"]) in
      ((let make
          (Props :
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t)
          =
          make
            ~b:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
            ~a:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () -> React.create_element make (make_props ?key ~b ~a ()))
        [@merlin.hide ])
  end
module ForwardRef =
  struct
    let make =
      let make_props
        : ?key:string ->
            ?ref:React.Dom.dom_ref -> unit -> <  >  Js_of_ocaml.Js.t
        =
        fun ?key ->
          fun ?ref ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("ref", (inject (Js_of_ocaml.Js.Optdef.option ref)));
                    ("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Stdlib.Option.map Js_of_ocaml.Js.string key))))|]
        [@@merlin.hide ] in
      let make =
        ((fun theRef ->
            div
              [|(Prop.ref ((theRef |> Js_of_ocaml.Js.Opt.to_option)
                   [@reason.preserve_braces ]))|]
              [((React.string (("ForwardRef")
                   [@reason.raw_literal "ForwardRef"]))
              [@reason.preserve_braces ])])
        [@warning "-16"]) in
      ((let make =
          React.forward_ref
            (fun (Props : <  >  Js_of_ocaml.Js.t) ->
               fun theRef -> make theRef) in
        fun ?key ->
          fun ?ref ->
            fun () -> React.create_element make (make_props ?ref ?key ()))
        [@merlin.hide ])
  end
module Memo =
  struct
    let make =
      let make_props
        : a:'a ->
            ?key:string ->
              unit ->
                < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                    ("a", (inject a))|][@@merlin.hide ] in
      let make =
        ((fun ~a ->
            (((div [||]
                 [(((Printf.sprintf (("`a` is %s")
                       [@reason.raw_literal "`a` is %s"]) a)
                      |> React.string)
                 [@reason.preserve_braces ])])
            [@reason.preserve_braces ]) : React.element))
        [@warning "-16"]) in
      ((let make =
          React.memo
            (fun
               (Props :
                 < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
               ->
               make
                 ~a:((fun (type res) ->
                        fun (type a0) ->
                          fun (a0 : a0 Js_of_ocaml.Js.t) ->
                            fun
                              (_ :
                                a0 ->
                                  < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                              -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : 
                              res)) (Props : < .. >  Js_of_ocaml.Js.t)
                       (fun x -> x#a))) in
        fun ~a ->
          fun ?key ->
            fun () -> React.create_element make (make_props ?key ~a ()))
        [@merlin.hide ])
  end
module MemoCustomCompareProps =
  struct
    let make =
      let make_props
        : a:'a ->
            ?key:string ->
              unit ->
                < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                    ("a", (inject a))|][@@merlin.hide ] in
      let make =
        ((fun ~a ->
            (((div [||]
                 [(((Printf.sprintf (("`a` is %d")
                       [@reason.raw_literal "`a` is %d"]) a)
                      |> React.string)
                 [@reason.preserve_braces ])])
            [@reason.preserve_braces ]) : React.element))
        [@warning "-16"]) in
      ((let make =
          React.memo
            (fun
               (Props :
                 < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
               ->
               make
                 ~a:((fun (type res) ->
                        fun (type a0) ->
                          fun (a0 : a0 Js_of_ocaml.Js.t) ->
                            fun
                              (_ :
                                a0 ->
                                  < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                              -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : 
                              res)) (Props : < .. >  Js_of_ocaml.Js.t)
                       (fun x -> x#a)))
            ~compare:(fun prevPros -> fun nextProps -> false) in
        fun ~a ->
          fun ?key ->
            fun () -> React.create_element make (make_props ?key ~a ()))
        [@merlin.hide ])
  end
let fragment foo = ((React.Fragment.make ~children:[foo] ())[@bla ])
let polyChildrenFragment foo bar =
  React.Fragment.make ~children:[foo; bar] ()
let nestedFragment foo bar baz =
  React.Fragment.make
    ~children:[foo; React.Fragment.make ~children:[bar; baz] ()] ()
let upper = Upper.make ()
let upperWithProp = Upper.make ~count ()
let upperWithChild foo = Upper.make ~children:[foo] ()
let upperWithChildren foo bar = Upper.make ~children:[foo; bar] ()
let lower = div [||] []
let lowerWithChildAndProps foo =
  a
    [|(Prop.tabIndex 1);(Prop.href (("https://example.com")
                           [@reason.raw_literal "https://example.com"]))|]
    [foo]
let lowerWithChildren foo bar = lower [||] [foo; bar]
let lowerWithChildrenComplex =
  div
    [|(Prop.className (("flex-container")
         [@reason.raw_literal "flex-container"]))|]
    [div [|(Prop.className (("sidebar")[@reason.raw_literal "sidebar"]))|]
       [h2 [|(Prop.className (("title")[@reason.raw_literal "title"]))|]
          [(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
          [@reason.preserve_braces ])];
       nav [|(Prop.className (("menu")[@reason.raw_literal "menu"]))|]
         [ul [||]
            [(((examples |>
                  (List.map
                     (fun e ->
                        ((li
                            [|(Prop.key ((e.path)[@reason.preserve_braces ]))|]
                            [a
                               [|(Prop.href ((e.path)
                                    [@reason.preserve_braces ]));(Prop.onClick
                                                                    ((
                                                                    fun event
                                                                    ->
                                                                    ((ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                    [@reason.preserve_braces
                                                                    ]))|]
                               [((e.title |> s)[@reason.preserve_braces ])]])
                        [@reason.preserve_braces ]))))
                 |> React.list)
            [@reason.preserve_braces ])]]]]
let lowerWithChildrenComplex2 =
  div
    [|(Prop.className (("content-wrapper")
         [@reason.raw_literal "content-wrapper"]))|]
    [div [|(Prop.className (("content")[@reason.raw_literal "content"]))|]
       [(((let example =
             (examples |>
                (List.find_opt
                   (fun e ->
                      ((e.path =
                          ((List.nth_opt url.path 0) |>
                             (Option.value ~default:(("")
                                [@reason.raw_literal ""]))))
                      [@reason.preserve_braces ]))))
               |> (Option.value ~default:firstExample) in
           div [||]
             [h2 [||] [((example.title |> s)[@reason.preserve_braces ])];
             h4 [||]
               [(((("Rendered component")
                    [@reason.raw_literal "Rendered component"]) |> s)
               [@reason.preserve_braces ])];
             ((example.element)
             [@reason.preserve_braces ]);
             h4 [||]
               [(((("Code")[@reason.raw_literal "Code"]) |> s)
               [@reason.preserve_braces ])];
             ((example.code)
             [@reason.preserve_braces ])]))
       [@reason.preserve_braces ])]]
let nestedElement = Foo.Bar.make ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ()
let innerHTML =
  div
    [|(Prop.dangerouslySetInnerHTML
         ((React.Dom.makeInnerHtml ~__html:(("<lol></lol>")
             [@reason.raw_literal "<lol></lol>"]))[@reason.preserve_braces ]))|]
    []
let make =
  let make_props
    : title:'title ->
        children:'children ->
          ?key:string ->
            unit ->
              <
                title: 'title Js_of_ocaml.Js.readonly_prop  ;children: 
                                                               'children
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                 > 
                Js_of_ocaml.Js.t
    =
    fun ~title ->
      fun ~children ->
        fun ?key ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                  ("children", (inject children));("title", (inject title))|]
    [@@merlin.hide ] in
  let make =
    ((fun ~title ->
        ((fun ~children ->
            (((div [||]
                 (((span [||] [((title |> s)[@reason.preserve_braces ])]) ::
                 children)[@reason.preserve_braces ]))
            [@reason.preserve_braces ]) : React.element))
        [@warning "-16"]))
    [@warning "-16"]) in
  ((let make
      (Props :
        <
          title: 'title Js_of_ocaml.Js.readonly_prop  ;children: 'children
                                                                   Js_of_ocaml.Js.readonly_prop
                                                           > 
          Js_of_ocaml.Js.t)
      =
      make
        ~children:((fun (type res) ->
                      fun (type a0) ->
                        fun (a0 : a0 Js_of_ocaml.Js.t) ->
                          fun
                            (_ :
                              a0 ->
                                < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                            ->
                            (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                            res)) (Props : < .. >  Js_of_ocaml.Js.t)
                     (fun x -> x#children))
        ~title:((fun (type res) ->
                   fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "title" : res))
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#title)) in
    fun ~title ->
      fun ~children ->
        fun ?key ->
          fun () ->
            React.create_element make (make_props ?key ~children ~title ()))
    [@merlin.hide ])
let t = FancyButton.make ~ref:buttonRef ~children:[div [||] []] ()
let t =
  button
    [|(Prop.ref ref);(Prop.className (("FancyButton")
                        [@reason.raw_literal "FancyButton"]))|] children
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          ?ref:React.Dom.dom_ref ->
            unit ->
              < children: 'children Js_of_ocaml.Js.readonly_prop   > 
                Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun ?ref ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("ref", (inject (Js_of_ocaml.Js.Optdef.option ref)));
                  ("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                  ("children", (inject children))|][@@merlin.hide ] in
  let make =
    ((fun ~children ->
        ((fun ref ->
            ((button
                [|(Prop.ref ref);(Prop.className (("FancyButton")
                                    [@reason.raw_literal "FancyButton"]))|]
                children)
            [@reason.preserve_braces ]))
        [@warning "-16"]))
    [@warning "-16"]) in
  ((let make =
      React.Dom.forward_ref
        (fun
           (Props :
             < children: 'children Js_of_ocaml.Js.readonly_prop   > 
               Js_of_ocaml.Js.t)
           ->
           fun ref ->
             make
               ~children:((fun (type res) ->
                             fun (type a0) ->
                               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                                 fun
                                   (_ :
                                     a0 ->
                                       < get: res   ;.. > 
                                         Js_of_ocaml.Js.gen_prop)
                                   ->
                                   (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                                   res)) (Props : < .. >  Js_of_ocaml.Js.t)
                            (fun x -> x#children)) ref) in
    fun ~children ->
      fun ?key ->
        fun ?ref ->
          fun () ->
            React.create_element make (make_props ?ref ?key ~children ()))
    [@merlin.hide ])
let testAttributes =
  div [|(Prop.translate (("yes")[@reason.raw_literal "yes"]))|]
    [picture [|(Prop.id (("idpicture")[@reason.raw_literal "idpicture"]))|]
       [img
          [|(Prop.src (("picture/img.png")
               [@reason.raw_literal "picture/img.png"]));(Prop.alt
                                                            (("test picture/img.png")
                                                            [@reason.raw_literal
                                                              "test picture/img.png"]));(
            Prop.id (("idimg")[@reason.raw_literal "idimg"]))|] [];
       source
         [|(Prop.type_ (("image/webp")[@reason.raw_literal "image/webp"]));(
           Prop.src (("picture/img1.webp")
             [@reason.raw_literal "picture/img1.webp"]))|] [];
       source
         [|(Prop.type_ (("image/jpeg")[@reason.raw_literal "image/jpeg"]));(
           Prop.src (("picture/img2.jpg")
             [@reason.raw_literal "picture/img2.jpg"]))|] []]]
let randomElement =
  text
    [|(Prop.dx (("1 2")[@reason.raw_literal "1 2"]));(Prop.dy (("3 4")
                                                        [@reason.raw_literal
                                                          "3 4"]))|] []
let make =
  let make_props
    : name:'name ->
        ?isDisabled:'isDisabled ->
          ?onClick:'onClick ->
            ?key:string ->
              unit ->
                <
                  name: 'name Js_of_ocaml.Js.readonly_prop  ;isDisabled: 
                                                               'isDisabled
                                                                 option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;onClick: 
                                                                   'onClick
                                                                    option
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                     > 
                  Js_of_ocaml.Js.t
    =
    fun ~name ->
      fun ?isDisabled ->
        fun ?onClick ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                    ("onClick", (inject onClick));("isDisabled",
                                                    (inject isDisabled));
                    ("name", (inject name))|][@@merlin.hide ] in
  let make =
    ((fun ~name ->
        ((fun ?isDisabled ->
            ((fun ?onClick ->
                (((button
                     [|(Prop.name name);(((let open Prop in maybe onClick))
                                           onClick);(Prop.disabled isDisabled)|]
                     [])
                [@reason.preserve_braces ]) : React.element))
            [@warning "-16"]))
        [@warning "-16"]))
    [@warning "-16"]) in
  ((let make
      (Props :
        <
          name: 'name Js_of_ocaml.Js.readonly_prop  ;isDisabled: 'isDisabled
                                                                   option
                                                                   Js_of_ocaml.Js.readonly_prop
                                                        ;onClick: 'onClick
                                                                    option
                                                                    Js_of_ocaml.Js.readonly_prop
                                                             > 
          Js_of_ocaml.Js.t)
      =
      make
        ?onClick:((fun (type res) ->
                     fun (type a0) ->
                       fun (a0 : a0 Js_of_ocaml.Js.t) ->
                         fun
                           (_ :
                             a0 ->
                               < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                           -> (Js_of_ocaml.Js.Unsafe.get a0 "onClick" : 
                           res)) (Props : < .. >  Js_of_ocaml.Js.t)
                    (fun x -> x#onClick))
        ?isDisabled:((fun (type res) ->
                        fun (type a0) ->
                          fun (a0 : a0 Js_of_ocaml.Js.t) ->
                            fun
                              (_ :
                                a0 ->
                                  < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                              ->
                              (Js_of_ocaml.Js.Unsafe.get a0 "isDisabled" : 
                              res)) (Props : < .. >  Js_of_ocaml.Js.t)
                       (fun x -> x#isDisabled))
        ~name:((fun (type res) ->
                  fun (type a0) ->
                    fun (a0 : a0 Js_of_ocaml.Js.t) ->
                      fun
                        (_ :
                          a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                        -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res))
                 (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
    fun ~name ->
      fun ?isDisabled ->
        fun ?onClick ->
          fun ?key ->
            fun () ->
              React.create_element make
                (make_props ?key ?onClick ?isDisabled ~name ()))
    [@merlin.hide ])
let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Stdlib.Option.map Js_of_ocaml.Js.string key))));
                ("name", (inject name))|][@@merlin.hide ] in
  let make =
    ((fun ?(name= (("joe")[@reason.raw_literal "joe"])) ->
        (((div [||]
             [(((Printf.sprintf (("`name` is %s")
                   [@reason.raw_literal "`name` is %s"]) name)
                  |> React.string)
             [@reason.preserve_braces ])])
        [@reason.preserve_braces ]) : React.element))
    [@warning "-16"]) in
  ((let make
      (Props :
        < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
          Js_of_ocaml.Js.t)
      =
      make
        ?name:((fun (type res) ->
                  fun (type a0) ->
                    fun (a0 : a0 Js_of_ocaml.Js.t) ->
                      fun
                        (_ :
                          a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                        -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res))
                 (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
    fun ?name ->
      fun ?key ->
        fun () -> React.create_element make (make_props ?key ?name ()))
    [@merlin.hide ])
